// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id              String    @id @default(uuid())
  name            String 
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  subcategories   SubCategory[] @relation("StoreToSubCategory")
  products        Product[] @relation("StoreToProduct")
  brands          Brand[] @relation("StoreToBrand")
  sale            Sale?
  orders          Order[] @relation("StoreToOrder")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String @id @default(uuid())
  storeId     String 
  store       Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  subCategories SubCategory[] @relation("CategoryToSubCategory")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SubCategory {
  id          String @id @default(uuid())
  storeId     String 
  store       Store @relation("StoreToSubCategory", fields: [storeId], references: [id])
  categoryId  String
  category    Category @relation("CategoryToSubCategory", fields: [categoryId], references: [id])
  products    Product[] @relation("SubCategoryToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Brand{
  id          String @id @default(uuid())
  storeId     String 
  store       Store @relation("StoreToBrand", fields: [storeId], references: [id])
  products    Product[] @relation("BrandToProduct")
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subCategoryId String?
  subCategory SubCategory? @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])
  brandId String?
  brand Brand? @relation("BrandToProduct", fields: [brandId], references: [id])
  name String
  price Decimal
  discount Boolean @default(false)
  discountPrice Decimal?
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  stock SizeStock[]
  images Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SizeStock{
  id          String @id @default(uuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  value       String
  amount      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  sizeStockId String
  productId String
  productName String
  productSize String
  productImage String
  itemPrice  Decimal
}

model Sale{
  id          String @id @default(uuid())
  storeId     String @unique
  store       Store @relation(fields: [storeId], references: [id])
  name        String
  description String?
  imageUrl    String?
  active      Boolean
}
